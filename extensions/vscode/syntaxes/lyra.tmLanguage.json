{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Lyra",
  "scopeName": "source.lyra",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#meta-commands"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#symbols"
    },
    {
      "include": "#brackets"
    },
    {
      "include": "#rules"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.lyra",
          "match": "//.*$"
        },
        {
          "name": "comment.block.lyra",
          "begin": "/\\*",
          "end": "\\*/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.lyra"
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.lyra",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.lyra",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.lyra",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.lyra",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.lyra",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.lyra",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.complex.lyra",
          "match": "\\b\\d+(\\.\\d+)?[iI]\\b"
        }
      ]
    },
    "meta-commands": {
      "patterns": [
        {
          "name": "support.function.meta.lyra",
          "match": "%\\w+",
          "captures": {
            "0": {
              "name": "keyword.control.directive.lyra"
            }
          }
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.builtin.math.lyra",
          "match": "\\b(Sin|Cos|Tan|ArcSin|ArcCos|ArcTan|Sinh|Cosh|Tanh|Log|Ln|Exp|Sqrt|Abs|Floor|Ceil|Round|Max|Min|Sum|Product|Mean|Median|Variance|StandardDeviation)\\b"
        },
        {
          "name": "entity.name.function.builtin.list.lyra",
          "match": "\\b(Length|First|Last|Rest|Most|Take|Drop|Join|Sort|Reverse|Union|Intersection|Complement|Select|Map|Apply|Fold|FoldLeft|FoldRight|Scan|Transpose)\\b"
        },
        {
          "name": "entity.name.function.builtin.pattern.lyra",
          "match": "\\b(MatchQ|Cases|Count|Position|Replace|ReplaceAll|DeleteCases|Extract)\\b"
        },
        {
          "name": "entity.name.function.builtin.control.lyra",
          "match": "\\b(If|Which|Switch|While|For|Do|Module|Block|With|Function)\\b"
        },
        {
          "name": "entity.name.function.builtin.io.lyra",
          "match": "\\b(Print|Echo|Input|Get|Put|Import|Export|ReadString|WriteString)\\b"
        },
        {
          "name": "entity.name.function.user.lyra",
          "match": "\\b[A-Z][a-zA-Z0-9]*(?=\\[)",
          "captures": {
            "0": {
              "name": "entity.name.function.lyra"
            }
          }
        },
        {
          "name": "meta.function-call.lyra",
          "begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\[",
          "end": "\\]",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.lyra"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.lyra",
          "match": "(:=|=|\\+=|-=|\\*=|/=)"
        },
        {
          "name": "keyword.operator.comparison.lyra",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.lyra",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.arithmetic.lyra",
          "match": "(\\+|-|\\*|/|\\^|%)"
        },
        {
          "name": "keyword.operator.rule.lyra",
          "match": "(->|:>|\\/\\.)"
        },
        {
          "name": "keyword.operator.pattern.lyra",
          "match": "(_|__|___|\\?)"
        },
        {
          "name": "keyword.operator.function.lyra",
          "match": "(&|@|@@|/@|//@)"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.lyra",
          "match": "\\b(If|Then|Else|While|For|Do|Break|Continue|Return|Module|Block|With)\\b"
        },
        {
          "name": "keyword.other.lyra",
          "match": "\\b(True|False|Null|Undefined|Missing|All|None)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.mathematical.lyra",
          "match": "\\b(Pi|E|I|Infinity|ComplexInfinity|GoldenRatio|EulerGamma|Catalan)\\b"
        },
        {
          "name": "constant.language.greek.lyra",
          "match": "\\b(Alpha|Beta|Gamma|Delta|Epsilon|Zeta|Eta|Theta|Iota|Kappa|Lambda|Mu|Nu|Xi|Omicron|Rho|Sigma|Tau|Upsilon|Phi|Chi|Psi|Omega)\\b"
        },
        {
          "name": "constant.language.boolean.lyra",
          "match": "\\b(True|False)\\b"
        }
      ]
    },
    "symbols": {
      "patterns": [
        {
          "name": "variable.other.lyra",
          "match": "\\b[a-z][a-zA-Z0-9]*\\b"
        },
        {
          "name": "variable.parameter.pattern.lyra",
          "match": "\\b[a-zA-Z][a-zA-Z0-9]*_+\\b"
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "name": "meta.brackets.square.lyra",
          "begin": "\\[",
          "end": "\\]",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.brackets.square.begin.lyra"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.brackets.square.end.lyra"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "meta.brackets.curly.lyra",
          "begin": "\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.brackets.curly.begin.lyra"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.brackets.curly.end.lyra"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "meta.brackets.round.lyra",
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.brackets.round.begin.lyra"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.brackets.round.end.lyra"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "rules": {
      "patterns": [
        {
          "name": "meta.rule.lyra",
          "match": "([^-:]+)\\s*(->|:>)\\s*([^,;\\]\\}]+)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            },
            "2": {
              "name": "keyword.operator.rule.lyra"
            },
            "3": {
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          }
        }
      ]
    }
  }
}