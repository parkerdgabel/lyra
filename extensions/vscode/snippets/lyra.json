{
  "Function Definition": {
    "prefix": "func",
    "body": [
      "${1:functionName}[${2:args}_] := ${3:body}"
    ],
    "description": "Define a function with delayed evaluation"
  },
  "Immediate Function Definition": {
    "prefix": "funcimm",
    "body": [
      "${1:functionName}[${2:args}_] = ${3:body}"
    ],
    "description": "Define a function with immediate evaluation"
  },
  "If Statement": {
    "prefix": "if",
    "body": [
      "If[${1:condition}, ${2:trueResult}, ${3:falseResult}]"
    ],
    "description": "Conditional expression"
  },
  "Which Statement": {
    "prefix": "which",
    "body": [
      "Which[",
      "  ${1:condition1}, ${2:result1},",
      "  ${3:condition2}, ${4:result2},",
      "  True, ${5:defaultResult}",
      "]"
    ],
    "description": "Multiple condition statement"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "For[${1:i} = ${2:start}, ${1:i} <= ${3:end}, ${1:i}++,",
      "  ${4:body}",
      "]"
    ],
    "description": "For loop"
  },
  "While Loop": {
    "prefix": "while",
    "body": [
      "While[${1:condition},",
      "  ${2:body}",
      "]"
    ],
    "description": "While loop"
  },
  "Module": {
    "prefix": "module",
    "body": [
      "Module[{${1:localVars}},",
      "  ${2:body}",
      "]"
    ],
    "description": "Module with local variables"
  },
  "Block": {
    "prefix": "block",
    "body": [
      "Block[{${1:localVars}},",
      "  ${2:body}",
      "]"
    ],
    "description": "Block with local variables"
  },
  "List": {
    "prefix": "list",
    "body": [
      "{${1:element1}, ${2:element2}, ${3:element3}}"
    ],
    "description": "Create a list"
  },
  "Rule": {
    "prefix": "rule",
    "body": [
      "${1:pattern} -> ${2:replacement}"
    ],
    "description": "Replacement rule"
  },
  "Delayed Rule": {
    "prefix": "drule",
    "body": [
      "${1:pattern} :> ${2:replacement}"
    ],
    "description": "Delayed replacement rule"
  },
  "Replace All": {
    "prefix": "replaceall",
    "body": [
      "${1:expression} /. ${2:rules}"
    ],
    "description": "Replace all occurrences"
  },
  "Pattern": {
    "prefix": "pattern",
    "body": [
      "${1:name}_${2:type}"
    ],
    "description": "Named pattern with type"
  },
  "Blank Sequence": {
    "prefix": "blankseq",
    "body": [
      "${1:name}__${2:type}"
    ],
    "description": "Blank sequence pattern"
  },
  "Blank Null Sequence": {
    "prefix": "blanknull",
    "body": [
      "${1:name}___${2:type}"
    ],
    "description": "Blank null sequence pattern"
  },
  "Map": {
    "prefix": "map",
    "body": [
      "Map[${1:function}, ${2:list}]"
    ],
    "description": "Map function over list"
  },
  "Apply": {
    "prefix": "apply",
    "body": [
      "Apply[${1:function}, ${2:arguments}]"
    ],
    "description": "Apply function to arguments"
  },
  "Select": {
    "prefix": "select",
    "body": [
      "Select[${1:list}, ${2:predicate}]"
    ],
    "description": "Select elements matching predicate"
  },
  "Cases": {
    "prefix": "cases",
    "body": [
      "Cases[${1:expression}, ${2:pattern}]"
    ],
    "description": "Extract cases matching pattern"
  },
  "Table": {
    "prefix": "table",
    "body": [
      "Table[${1:expression}, {${2:iterator}, ${3:start}, ${4:end}}]"
    ],
    "description": "Generate table of values"
  },
  "Sum": {
    "prefix": "sum",
    "body": [
      "Sum[${1:expression}, {${2:iterator}, ${3:start}, ${4:end}}]"
    ],
    "description": "Symbolic sum"
  },
  "Product": {
    "prefix": "product",
    "body": [
      "Product[${1:expression}, {${2:iterator}, ${3:start}, ${4:end}}]"
    ],
    "description": "Symbolic product"
  },
  "Solve": {
    "prefix": "solve",
    "body": [
      "Solve[${1:equations}, ${2:variables}]"
    ],
    "description": "Solve equations"
  },
  "Plot": {
    "prefix": "plot",
    "body": [
      "Plot[${1:function}, {${2:variable}, ${3:min}, ${4:max}}]"
    ],
    "description": "Plot function"
  },
  "Matrix": {
    "prefix": "matrix",
    "body": [
      "{{${1:a11}, ${2:a12}}, {${3:a21}, ${4:a22}}}"
    ],
    "description": "2x2 matrix"
  },
  "Try Catch": {
    "prefix": "try",
    "body": [
      "TryCatch[",
      "  ${1:expression},",
      "  ${2:catchExpression}",
      "]"
    ],
    "description": "Try-catch error handling"
  },
  "Print Statement": {
    "prefix": "print",
    "body": [
      "Print[${1:message}]"
    ],
    "description": "Print message"
  },
  "Echo Statement": {
    "prefix": "echo",
    "body": [
      "Echo[${1:expression}]"
    ],
    "description": "Echo expression and return it"
  }
}