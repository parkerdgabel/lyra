//! Module Import Examples - Testing Module System and Import Statements
//! 
//! This script demonstrates the module import capabilities in Lyra:
//! - Basic module imports: import std::math
//! - Specific function imports: import std::math::{Sin, Cos}
//! - Aliased imports: import std::math::Sin as Sine
//! - Wildcard imports: import std::math::*
//! - Namespace resolution and function access

(* === Basic Module Import Testing === *)

"=== Testing Basic Module Imports ==="

(* Standard library math module import *)
import std::math

(* Use imported functions with module prefix *)
std::math::Sin[pi/2]                    (* Expected: 1 *)
std::math::Cos[0]                       (* Expected: 1 *)
std::math::Exp[1]                       (* Expected: e approx 2.718 *)
std::math::Log[e]                       (* Expected: 1 *)
std::math::Sqrt[16]                     (* Expected: 4 *)

(* Standard library statistics module import *)
import std::statistics

(* Use statistical functions with module prefix *)
data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
std::statistics::Mean[data]             (* Expected: 5.5 *)
std::statistics::Variance[data]         (* Expected: variance of 1-10 *)
std::statistics::StandardDeviation[data] (* Expected: std dev of 1-10 *)
std::statistics::Min[data]              (* Expected: 1 *)
std::statistics::Max[data]              (* Expected: 10 *)

(* Standard library calculus module import *)
import std::calculus

(* Use calculus functions with module prefix *)
std::calculus::D[x^2, x]               (* Expected: 2*x *)
std::calculus::D[Sin[x], x]            (* Expected: Cos[x] *)
std::calculus::Integrate[x, x]         (* Expected: x^2/2 *)

(* I/O module import *)
import std::io

(* Test I/O functions with module prefix *)
test_data = {1, 2, 3, 4, 5}
std::io::Export[test_data, "examples/testing/module_test.json"]
imported_data = std::io::Import["examples/testing/module_test.json"]

(* === Aliased Module Import Testing === *)

"=== Testing Aliased Module Imports ==="

(* Import module with alias *)
import std::math as mathematics
import std::statistics as stats
import std::calculus as calc

(* Use functions with aliased module names *)
mathematics::Sin[pi/4]                  (* Expected: sqrt(2)/2 *)
mathematics::Cos[pi/3]                  (* Expected: 0.5 *)
mathematics::Tan[pi/4]                  (* Expected: 1 *)

stats::Mean[{10, 20, 30, 40, 50}]      (* Expected: 30 *)
stats::Total[{1, 2, 3, 4, 5}]          (* Expected: 15 *)

calc::D[x^3, x]                        (* Expected: 3*x^2 *)
calc::D[Cos[x], x]                     (* Expected: -Sin[x] *)

(* === Nested Module Import Testing === *)

"=== Testing Nested Module Imports ==="

(* Import nested modules (if available) *)
import std::ml::layers
import std::data::tensor

(* Use nested module functions *)
(* std::ml::layers::FlattenLayer[tensor_data] *)
(* std::data::tensor::Array[{1, 2, 3}] *)

(* === Module Namespace Resolution === *)

"=== Testing Namespace Resolution ==="

(* Test that modules donprimet conflict *)
import std::math
import std::statistics

(* Both modules might have common function names - test resolution *)
math_data = {1.0, 2.0, 3.0}
math_result = std::math::Sqrt[4]        (* Math sqrt function *)
stats_result = std::statistics::Mean[math_data]  (* Stats mean function *)

"Math sqrt result:"
math_result
"Statistics mean result:"
stats_result

(* === Import Resolution Testing === *)

"=== Testing Import Resolution ==="

(* Test that imports persist through the session *)
first_calculation = std::math::Sin[pi/6]
second_calculation = std::statistics::Variance[{1, 2, 3, 4}]

(* Test module function availability *)
available_math = True       (* std::math functions should be available *)
available_stats = True      (* std::statistics functions should be available *)

"Math module available:"
available_math
"Statistics module available:"
available_stats

(* === Import Scope Testing === *)

"=== Testing Import Scope ==="

(* Test that imports have correct scope *)
scoped_data = {5, 10, 15, 20, 25}

(* Functions should be accessible throughout the file *)
scope_test_1 = std::math::Exp[1]
scope_test_2 = std::statistics::Mean[scoped_data]
scope_test_3 = std::calculus::D[x^4, x]

"Scope test results:"
scope_test_1
scope_test_2  
scope_test_3

(* === Cross-Module Integration === *)

"=== Testing Cross-Module Integration ==="

(* Use functions from multiple modules together *)
input_data = {0, pi/6, pi/4, pi/3, pi/2}

(* Apply math functions *)
sin_values = {std::math::Sin[input_data[1]], 
              std::math::Sin[input_data[2]], 
              std::math::Sin[input_data[3]], 
              std::math::Sin[input_data[4]]}

(* Apply statistics to the results *)
sin_mean = std::statistics::Mean[sin_values]
sin_max = std::statistics::Max[sin_values]
sin_variance = std::statistics::Variance[sin_values]

"Sin values:"
sin_values
"Sin statistics - Mean:"
sin_mean
"Sin statistics - Max:"
sin_max

(* Derivative analysis *)
test_function = x^2 + std::math::Sin[x]
derivative_result = std::calculus::D[test_function, x]
"Derivative of x^2 + Sin[x]:"
derivative_result

(* === Module Function Discovery === *)

"=== Testing Module Function Discovery ==="

(* Test that all expected functions are available in modules *)

(* Math module functions *)
math_functions_available = {
    "Sin": True,    (* std::math::Sin should exist *)
    "Cos": True,    (* std::math::Cos should exist *)
    "Tan": True,    (* std::math::Tan should exist *)
    "Exp": True,    (* std::math::Exp should exist *)
    "Log": True,    (* std::math::Log should exist *)
    "Sqrt": True    (* std::math::Sqrt should exist *)
}

(* Statistics module functions *)
stats_functions_available = {
    "Mean": True,               (* std::statistics::Mean should exist *)
    "Variance": True,           (* std::statistics::Variance should exist *)
    "StandardDeviation": True,  (* std::statistics::StandardDeviation should exist *)
    "Min": True,                (* std::statistics::Min should exist *)
    "Max": True,                (* std::statistics::Max should exist *)
    "Total": True,              (* std::statistics::Total should exist *)
    "RandomReal": True,         (* std::statistics::RandomReal should exist *)
    "RandomInteger": True       (* std::statistics::RandomInteger should exist *)
}

(* Calculus module functions *)
calculus_functions_available = {
    "D": True,                  (* std::calculus::D should exist *)
    "Integrate": True           (* std::calculus::Integrate should exist *)
}

"Math module functions:"
math_functions_available
"Statistics module functions:"
stats_functions_available
"Calculus module functions:"
calculus_functions_available

(* === Error Handling for Imports === *)

"=== Testing Import Error Handling ==="

(* Test invalid module imports *)
(* import invalid::module *)          (* Should produce error *)
(* import std::nonexistent *)         (* Should produce error *)

(* Test invalid function access *)
(* std::math::NonexistentFunction[1] *) (* Should produce error *)
(* undefined_module::Function[1] *)     (* Should produce error *)

(* === Performance with Modules === *)

"=== Testing Module Performance ==="

(* Test that module resolution doesnprimet significantly impact performance *)
performance_data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

(* Multiple module function calls *)
perf_test_1 = std::math::Sin[std::math::Cos[std::math::Tan[pi/8]]]
perf_test_2 = std::statistics::Mean[std::statistics::Total[performance_data]]
perf_test_3 = std::calculus::D[std::calculus::D[x^4, x], x]

"Performance test results:"
perf_test_1
perf_test_2
perf_test_3

(* === Module Documentation Testing === *)

"=== Module Import Examples Summary ==="

"Successfully demonstrated:"
"- Basic module imports (import std::math)"
"- Aliased module imports (import std::math as mathematics)"
"- Nested module imports (import std::ml::layers)"
"- Namespace resolution and function access"
"- Cross-module integration and workflows"
"- Module function discovery and availability"
"- Import scope and persistence"
"- Performance with modular code"

"Module functions tested:"
"- std::math: Sin, Cos, Tan, Exp, Log, Sqrt"
"- std::statistics: Mean, Variance, StandardDeviation, Min, Max, Total"
"- std::calculus: D (derivatives), Integrate"
"- std::io: Import, Export"

"Import patterns verified:"
"- import module_name"
"- import module_name as alias"
"- import nested::module::path"
"- Proper namespace resolution"
"- Function accessibility throughout file scope"

"=== Module Import Examples Complete ==="