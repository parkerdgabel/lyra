(*
  Todo CLI â€” SQLite-backed task tracker
  Usage:
    lyra-runner --file examples/apps/todo.lyra -- init
    lyra-runner --file examples/apps/todo.lyra -- add "Buy milk" [--project Home] [--prio 2]
    lyra-runner --file examples/apps/todo.lyra -- list [--all|--done] [--project Home]
    lyra-runner --file examples/apps/todo.lyra -- done 1
    lyra-runner --file examples/apps/todo.lyra -- undone 1
    lyra-runner --file examples/apps/todo.lyra -- edit 1 "Buy almond milk"
    lyra-runner --file examples/apps/todo.lyra -- delete 1
    lyra-runner --file examples/apps/todo.lyra -- clear-done
*)

dbDir := "target/tmp";
dbFile := PathJoin[{dbDir, "todo.sqlite"}];
dsn := StringJoin[{"sqlite://", dbFile}];

EnsureSchema[conn_] := (
  Exec[conn, "CREATE TABLE IF NOT EXISTS todos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    done INTEGER NOT NULL DEFAULT 0,
    project TEXT,
    prio INTEGER,
    created_at INTEGER NOT NULL DEFAULT (strftime('%s','now'))
  )"];
  True
);

ShowHelp[] := Puts[StringJoin[{
  "Todo CLI\n",
  "Commands:\n",
  "  init\n",
  "  add <title> [--project P] [--prio N]\n",
  "  list [--all|--done] [--project P]\n",
  "  done <id>\n",
  "  undone <id>\n",
  "  edit <id> <new title>\n",
  "  delete <id>\n",
  "  clear-done\n"
}]];

FormatRow[row_] := (
  id := Part[row, "id"]; title := Part[row, "title"]; pr := Part[row, "prio"]; proj := Part[row, "project"]; dn := Part[row, "done"]; cr := Part[row, "created"];
  mark := If[dn==1, "[x]", "[ ]"];
  StringJoin[{JsonStringify[id], " ", mark, " ", title,
    If[proj==Null || proj=="", "", StringJoin[{"  (", proj, ")"}]],
    If[pr==Null || pr==0, "", StringJoin[{"  prio:", JsonStringify[pr]}]],
    "  ", cr
  }]
);

ListTodos[conn_, opts_, flags_] := (
  filter := If[AssocContainsKeyQ[flags, "done"], "done", If[AssocContainsKeyQ[flags, "all"], "all", "open"]];
  project := Lookup[opts, "project"];
  where := If[filter=="all", "1=1", If[filter=="done", "done=1", "done=0"]];
  where2 := If[project==Null, where, StringJoin[{where, " AND (project = '", project, "')"}]];
  sql := StringJoin[{"SELECT id, title, done, coalesce(project,'') AS project, coalesce(prio,0) AS prio, datetime(created_at,'unixepoch') AS created FROM todos WHERE ", where2, " ORDER BY done, prio DESC, created_at DESC"}];
  rowsDs := SQL[conn, sql];
  rows := Collect[rowsDs];
  fmt := (row_) => (
    id := Part[row, "id"]; t := Part[row, "title"]; dn := Part[row, "done"]; pr := Part[row, "prio"]; pj := Part[row, "project"]; cr := Part[row, "created"];
    mark := If[dn==1, AnsiStyle["[x]", <|"Color"->"green"|>], AnsiStyle["[ ]", <|"Color"->"yellow"|>]];
    title := If[dn==1, AnsiStyle[t, <|"Dim"->True|>], t];
    <|"id"->id, "title"->StringJoin[{mark, " ", title}], "project"->pj, "prio"->pr, "created"->cr|>
  );
  rows2 := Map[fmt, rows];
  header := StringJoin[{AnsiStyle["TODOs", <|"Bold"->True|>], "  ", If[filter=="done", "(done)", If[filter=="all", "(all)", "(open)"]]}];
  Puts[header];
  Puts[Rule["-", 60]];
  Puts[TableSimple[rows2, <|"Columns"->{"id","title","project","prio","created"}|>]];
);

AddTodo[conn_, title_, opts_] := (
  project := Lookup[opts, "project"]; pr := Lookup[opts, "prio"];
  Exec[conn, "INSERT INTO todos (title, project, prio, created_at, done) VALUES ($title, $project, $prio, strftime('%s','now'), 0)", <|"title"->title, "project"->project, "prio"->pr|>];
  Puts["Added."]
);

MarkDone[conn_, id_, done_] := (
  Exec[conn, "UPDATE todos SET done=$done WHERE id=$id", <|"id"->id, "done"->If[done, 1, 0]|>];
  Puts[If[done, "Marked done.", "Marked open."]]
);

EditTodo[conn_, id_, title_] := (
  Exec[conn, "UPDATE todos SET title=$title WHERE id=$id", <|"id"->id, "title"->title|>];
  Puts["Updated."]
);

DeleteTodo[conn_, id_] := (
  Exec[conn, "DELETE FROM todos WHERE id=$id", <|"id"->id|>];
  Puts["Deleted."]
);

ClearDone[conn_] := (
  Exec[conn, "DELETE FROM todos WHERE done=1"]; Puts["Cleared done items."]
);

(* Main entry *)
Args := ArgsParse[{"--project", "--prio", "--all", "--done"}];
Rest := Part[Args, "Rest"]; Opts := Part[Args, "Options"]; Flags := Part[Args, "Flags"];

MakeDirectory[dbDir, <|"Parents"->True|>];
conn := Connect[dsn]; EnsureSchema[conn];

cmdIdx := If[Length[Rest] >= 1 && RegexIsMatch[Part[Rest,1], ".*\\.lyra$"], 2, 1];
cmd := If[Length[Rest] >= cmdIdx, Part[Rest, cmdIdx], "help"];
If[cmd=="help", ShowHelp[],
  If[cmd=="init", (EnsureSchema[conn]; Puts["Initialized."]),
    If[cmd=="add", (
      If[Length[Rest] < cmdIdx+1, Puts["Usage: add <title> [--project P] [--prio N]"],
        title := Part[Rest, cmdIdx+1]; AddTodo[conn, title, Opts]
      ]),
      If[cmd=="list", (ListTodos[conn, Opts, Flags]),
        If[cmd=="done", (If[Length[Rest] < cmdIdx+1, Puts["Usage: done <id>"], MarkDone[conn, Part[Rest, cmdIdx+1], True]]),
          If[cmd=="undone", (If[Length[Rest] < cmdIdx+1, Puts["Usage: undone <id>"], MarkDone[conn, Part[Rest, cmdIdx+1], False]]),
            If[cmd=="edit", (If[Length[Rest] < cmdIdx+2, Puts["Usage: edit <id> <new title>"], EditTodo[conn, Part[Rest, cmdIdx+1], Part[Rest, cmdIdx+2]]]),
              If[cmd=="delete", (If[Length[Rest] < cmdIdx+1, Puts["Usage: delete <id>"], DeleteTodo[conn, Part[Rest, cmdIdx+1]]]),
                If[cmd=="clear-done", ClearDone[conn], ShowHelp[])
              )
            )
          )
        ]
      ]
    ]
  ]
]
