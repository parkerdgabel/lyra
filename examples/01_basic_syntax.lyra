//! Basic Syntax Examples - Lyra Language Fundamentals
//! 
//! This example demonstrates the core syntax and basic operations in Lyra:
//! - Variable assignment and symbols
//! - Basic arithmetic and mathematical operations
//! - String operations and text manipulation
//! - List creation and basic operations
//! - Comments and documentation conventions
//! - Function definitions and calls

(* === Comments and Documentation === *)

(* Single-line comment using (* ... *) syntax *)
(* 
   Multi-line comments can span
   multiple lines and are useful
   for detailed explanations
*)

//! Documentation comments use //! and provide structured information
//! They are used for API documentation and help systems

(* === Variable Assignment and Symbols === *)

(* Basic variable assignments *)
x = 5                              (* Integer assignment *)
y = 3.14159                        (* Real number assignment *)
name = "Lyra"                      (* String assignment *)
flag = True                        (* Boolean assignment *)

(* Symbols are first-class values in Lyra *)
symbol_example = Pi                (* Pi is a built-in symbol *)
user_symbol = MySymbol             (* User-defined symbol *)

(* Multiple assignments *)
a = 10
b = 20
c = a + b                          (* c = 30 *)

(* === Basic Arithmetic Operations === *)

(* Integer arithmetic *)
addition = 15 + 25                 (* Expected: 40 *)
subtraction = 100 - 35             (* Expected: 65 *)
multiplication = 7 * 8             (* Expected: 56 *)
division = 84 / 12                 (* Expected: 7 *)
power = 2^10                       (* Expected: 1024 *)
modulo = Modulo[17, 5]             (* Expected: 2 *)

(* Floating-point arithmetic *)
float_add = 3.5 + 2.7              (* Expected: 6.2 *)
float_mult = 2.5 * 4.0             (* Expected: 10.0 *)
float_div = 22.5 / 4.5             (* Expected: 5.0 *)

(* Mixed arithmetic (integers and floats) *)
mixed = 5 + 3.14                   (* Expected: 8.14 *)
scientific = 1.23e-4 * 2.0e3       (* Expected: 0.246 *)

(* Order of operations (PEMDAS) *)
expression1 = 2 + 3 * 4            (* Expected: 14, not 20 *)
expression2 = (2 + 3) * 4          (* Expected: 20 *)
expression3 = 2^3 * 4 + 1          (* Expected: 33 *)
complex_expr = (5 + 3) / (2 * 2)   (* Expected: 2.0 *)

(* === Mathematical Functions === *)

(* Basic mathematical functions *)
square_root = Sqrt[16]             (* Expected: 4 *)
square_root_2 = Sqrt[2]            (* Expected: ~1.414 *)
absolute = Abs[-42]                (* Expected: 42 *)
sign = Sign[-15]                   (* Expected: -1 *)

(* Trigonometric functions *)
sine = Sin[Pi/2]                   (* Expected: 1 *)
cosine = Cos[0]                    (* Expected: 1 *)
tangent = Tan[Pi/4]                (* Expected: 1 *)

(* Exponential and logarithmic functions *)
exponential = Exp[1]               (* Expected: e ≈ 2.718 *)
natural_log = Log[E]               (* Expected: 1 *)
log_base_10 = Log[100, 10]         (* Expected: 2 *)

(* Power functions *)
power_example = Power[2, 8]        (* Expected: 256 *)
cube_root = Power[8, 0.3333333]    (* Expected: ~2 *)

(* === String Operations === *)

(* Basic string creation *)
greeting = "Hello, World!"
language = "Lyra"
version = "1.0"

(* String concatenation *)
message = "Welcome to " + language (* Expected: "Welcome to Lyra" *)
full_message = greeting + " This is " + language + " v" + version

(* String length *)
message_length = StringLength[greeting]      (* Expected: 13 *)
name_length = StringLength[language]         (* Expected: 4 *)

(* String manipulation *)
first_chars = StringTake[greeting, 5]        (* Expected: "Hello" *)
last_chars = StringTake[greeting, -6]        (* Expected: "World!" *)
without_first = StringDrop[greeting, 7]      (* Expected: "World!" *)
without_last = StringDrop[greeting, -7]      (* Expected: "Hello," *)

(* String joining *)
words = {"Hello", "beautiful", "world"}
sentence = StringJoin[words, " "]            (* Expected: "Hello beautiful world" *)
csv_like = StringJoin[{"A", "B", "C"}, ","] (* Expected: "A,B,C" *)

(* === List Operations === *)

(* List creation *)
empty_list = {}                              (* Empty list *)
numbers = {1, 2, 3, 4, 5}                  (* List of integers *)
mixed_list = {1, "hello", 3.14, True}      (* Mixed type list *)
nested_list = {{1, 2}, {3, 4}, {5, 6}}     (* Nested lists *)

(* List access and properties *)
list_length = Length[numbers]                (* Expected: 5 *)
first_element = Head[numbers]                (* Expected: 1 *)
rest_elements = Tail[numbers]                (* Expected: {2, 3, 4, 5} *)

(* List concatenation *)
more_numbers = {6, 7, 8}
combined = Append[numbers, more_numbers]     (* Append list to list *)
single_append = Append[numbers, 6]           (* Append single element *)

(* List flattening *)
deep_nested = {{{1, 2}}, {3, {4, 5}}}
flattened = Flatten[deep_nested]             (* Expected: {1, 2, 3, 4, 5} *)
one_level = Flatten[nested_list, 1]          (* Flatten one level *)

(* === Function Definitions === *)

(* Simple function definitions using immediate assignment (=) *)
square[x_] = x^2                             (* Square function *)
double[x_] = 2 * x                           (* Double function *)
add[x_, y_] = x + y                          (* Addition function *)

(* Function calls *)
square_of_5 = square[5]                      (* Expected: 25 *)
double_10 = double[10]                       (* Expected: 20 *)
sum_result = add[15, 25]                     (* Expected: 40 *)

(* Functions with multiple parameters *)
volume[length_, width_, height_] = length * width * height
box_volume = volume[3, 4, 5]                 (* Expected: 60 *)

(* Functions using lists *)
sum_of_squares[list_] = Total[Map[square, list]]
squares_sum = sum_of_squares[{1, 2, 3, 4}]  (* Expected: 30 *)

(* === Delayed Assignment and Functions === *)

(* Delayed assignment using := (evaluated each time) *)
random_delayed := RandomReal[]               (* New random each time *)
current_time := DateString[]                 (* Current time each access *)

(* Get different values each time *)
rand1 = random_delayed                       (* Some random value *)
rand2 = random_delayed                       (* Different random value *)

(* Functions with delayed evaluation *)
factorial[n_] := If[n <= 1, 1, n * factorial[n - 1]]
fact_5 = factorial[5]                        (* Expected: 120 *)

(* Conditional function definitions *)
absolute_value[x_] := If[x >= 0, x, -x]
abs_test1 = absolute_value[7]                (* Expected: 7 *)
abs_test2 = absolute_value[-7]               (* Expected: 7 *)

(* === Complex Expressions === *)

(* Combining multiple operations *)
complex_calc = (square[3] + double[4]) * absolute_value[-2]  (* (9 + 8) * 2 = 34 *)

(* Nested function calls *)
nested_result = square[add[3, 4]]            (* square[7] = 49 *)

(* List comprehension-like operations *)
squared_numbers = Map[square, {1, 2, 3, 4, 5}]     (* {1, 4, 9, 16, 25} *)
doubled_numbers = Map[double, numbers]               (* {2, 4, 6, 8, 10} *)

(* === Constants and Special Values === *)

(* Mathematical constants *)
pi_value = Pi                                (* π ≈ 3.14159 *)
e_value = E                                  (* e ≈ 2.71828 *)
euler_gamma = EulerGamma                     (* γ ≈ 0.57722 *)
golden_ratio = GoldenRatio                   (* φ ≈ 1.61803 *)

(* Special numeric values *)
infinity = Infinity                          (* ∞ *)
undefined = Undefined                        (* Undefined result *)
missing_value = Missing                      (* Missing data *)

(* === Boolean Operations === *)

(* Boolean values and operations *)
true_value = True
false_value = False
not_true = Not[True]                         (* Expected: False *)
not_false = Not[False]                       (* Expected: True *)

(* Logical operations *)
and_result = True && False                   (* Expected: False *)
or_result = True || False                    (* Expected: True *)
xor_result = Xor[True, False]               (* Expected: True *)

(* Comparisons *)
greater = 5 > 3                             (* Expected: True *)
less = 10 < 5                               (* Expected: False *)
equal = 7 == 7                              (* Expected: True *)
not_equal = 5 != 3                          (* Expected: True *)
greater_equal = 5 >= 5                      (* Expected: True *)
less_equal = 3 <= 10                        (* Expected: True *)

(* === Type Information === *)

(* Getting type information *)
int_type = Head[42]                         (* Integer *)
real_type = Head[3.14]                      (* Real *)
string_type = Head["hello"]                 (* String *)
list_type = Head[{1, 2, 3}]                (* List *)
symbol_type = Head[x]                       (* Symbol *)

(* === Output and Display === *)

(* String output for results *)
"=== Basic Syntax Examples Complete ==="
"Variables: x = " + ToString[x] + ", y = " + ToString[y]
"Arithmetic: " + ToString[addition] + ", " + ToString[multiplication]
"Functions: square[5] = " + ToString[square_of_5]
"Lists: Length = " + ToString[list_length] + ", Head = " + ToString[first_element]
"Strings: Length = " + ToString[message_length] + ", Message = " + message
"Booleans: greater = " + ToString[greater] + ", equal = " + ToString[equal]

(* === Summary === *)

"All basic syntax elements demonstrated:"
"✓ Variable assignment (= and :=)"
"✓ Arithmetic operations (+, -, *, /, ^, %)"
"✓ Mathematical functions (Sin, Cos, Sqrt, Log, etc.)"
"✓ String operations (concatenation, length, manipulation)"
"✓ List operations (creation, access, concatenation, flattening)"
"✓ Function definitions and calls"
"✓ Boolean operations and comparisons"
"✓ Constants and special values"
"✓ Comments and documentation"
"✓ Complex expressions and nested operations"

(* Final result *)
"Basic syntax examples completed successfully!"