(* Basic Telemetry Collection Example *)
(* Demonstrates metrics, logging, and tracing functionality *)

(* Create metrics collectors *)
Print["Setting up metrics collectors..."]

(* Counter for HTTP requests *)
request_counter = MetricsCollector["http_requests_total", "counter", {
    {"service", "lyra_engine"},
    {"endpoint", "/api/evaluate"}
}]

(* Gauge for memory usage *)
memory_gauge = MetricsCollector["memory_usage_bytes", "gauge", {}]

(* Histogram for request duration *)
duration_histogram = MetricsCollector["request_duration_ms", "histogram", {}]

Print["Metrics collectors created successfully"]

(* Set up logging *)
Print["Setting up log aggregator..."]

logger = LogAggregator["info", "json", {"stdout"}, {
    {"service", "lyra_engine"},
    {"environment", "development"}
}]

Print["Log aggregator configured"]

(* Set up distributed tracing *)
Print["Setting up distributed tracing..."]

tracer = DistributedTracing["lyra_engine", {
    {"version", "2.0.0"},
    {"component", "symbolic_computation"}
}]

Print["Distributed tracing initialized"]

(* Simulate application activity *)
Print["Simulating application activity..."]

(* Log application startup *)
LogEvent[logger, "info", "Application started", {
    {"component", "main"},
    {"startup_time_ms", "150"}
}]

(* Record metrics *)
MetricIncrement[request_counter, 1, {{"method", "POST"}, {"status", "200"}}]
MetricGauge[memory_gauge, 1024000000, {}]  (* 1GB memory usage *)
MetricHistogram[duration_histogram, 125.5, {}]

(* Create a trace span *)
span = TraceSpan[tracer, "symbolic_computation", Missing, {
    {"expression", "Integrate[x^2, x]"},
    {"complexity", "simple"}
}]

(* Add events to span *)
SpanEvent[span, "parsing_complete", {
    {"duration_ms", "25"},
    {"tokens", "5"}
}]

SpanEvent[span, "computation_complete", {
    {"duration_ms", "100"},
    {"result", "x^3/3"}
}]

(* Log computation result *)
LogEvent[logger, "info", "Computation completed", {
    {"expression", "Integrate[x^2, x]"},
    {"result", "x^3/3"},
    {"duration_ms", "125"}
}]

(* Finish span *)
span.finish()

(* Get metrics information *)
Print["Metrics information:"]
Print["Counter name: " <> request_counter.name()]
Print["Counter type: " <> request_counter.type()]

Print["Gauge name: " <> memory_gauge.name()]
Print["Gauge type: " <> memory_gauge.type()]

Print["Histogram name: " <> duration_histogram.name()]
Print["Histogram type: " <> duration_histogram.type()]

(* Get log statistics *)
Print["Log statistics:"]
Print["Total log events: " <> ToString[logger.count()]]

(* Filter logs by level *)
info_logs = logger.filter("info")
Print["Info log count: " <> ToString[Length[info_logs]]]

(* Export telemetry data *)
Print["Setting up telemetry export..."]

exporter = TelemetryExport[
    {"metrics", "logs", "traces"},
    "json",
    "stdout"
]

(* Export collected data *)
export_result = exporter.export()
Print["Telemetry export result: " <> ToString[export_result]]

Print["Basic telemetry example completed successfully!"]